{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\react-app\\\\todo-app\\\\src\\\\components\\\\Item.js\";\nimport React from 'react';\n\nclass Item extends React.Component {\n  render() {\n    const {\n      item,\n      getEditTodo,\n      todoEditingId\n    } = this.props;\n    const isEditing = todoEditingId === item.id;\n    const text = this.state.text;\n\n    const setText = text => {\n      this.setState({\n        text\n      });\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: `${isEditing ? 'editing' : ''} ${item.isCompleted ? 'completed' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box_list_item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          className: \"box_list_item_input\",\n          checked: item.isCompleted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          onDoubleClick: () => getEditTodo(item.id),\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"destroy\",\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"edit\",\n        value: item.text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Item;","map":{"version":3,"sources":["E:/react-app/todo-app/src/components/Item.js"],"names":["React","Item","Component","render","item","getEditTodo","todoEditingId","props","isEditing","id","text","state","setText","setState","isCompleted","e","target","value"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAN,SAAmBD,KAAK,CAACE,SAAzB,CAAmC;AAEjCC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,IAAF;AAASC,MAAAA,WAAT;AAAsBC,MAAAA;AAAtB,QAAwC,KAAKC,KAAnD;AACA,UAAMC,SAAS,GAAGF,aAAa,KAAKF,IAAI,CAACK,EAAzC;AACA,UAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWD,IAAxB;;AACA,UAAME,OAAO,GAAIF,IAAD,IAAU;AACxB,WAAKG,QAAL,CAAc;AACZH,QAAAA;AADY,OAAd;AAGD,KAJD;;AAKA,wBACE;AAAI,MAAA,SAAS,EAAG,GAAEF,SAAS,GAAG,SAAH,GAAe,EAAG,IAAGJ,IAAI,CAACU,WAAL,GAAmB,WAAnB,GAAiC,EAAG,EAApF;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACE;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,SAAS,EAAC,qBAAjC;AAAuD,UAAA,OAAO,EAAEV,IAAI,CAACU;AAArE;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,aAAa,EAAE,MAAMT,WAAW,CAACD,IAAI,CAACK,EAAN,CAAvC;AAAA,oBAAmDL,IAAI,CAACM;AAAxD;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,SAAS,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AACI,QAAA,SAAS,EAAC,MADd;AAEI,QAAA,KAAK,EAAEN,IAAI,CAACM,IAFhB;AAGI,QAAA,QAAQ,EAAGK,CAAD,IAAOH,OAAO,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV;AAH5B;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AA1BgC;;AA6BnC,eAAehB,IAAf","sourcesContent":["import React from 'react'\r\n\r\nclass Item extends React.Component {\r\n\r\n  render() {\r\n    const { item,  getEditTodo, todoEditingId } = this.props\r\n    const isEditing = todoEditingId === item.id\r\n    const text = this.state.text\r\n    const setText = (text) => {\r\n      this.setState({\r\n        text\r\n      })\r\n    } \r\n    return (\r\n      <li className={`${isEditing ? 'editing' : ''} ${item.isCompleted ? 'completed' : ''}`}>\r\n        <div className=\"box_list_item\">\r\n          <input type=\"checkbox\" className=\"box_list_item_input\" checked={item.isCompleted}/>\r\n          <label onDoubleClick={() => getEditTodo(item.id)}>{item.text}</label>\r\n          <button className=\"destroy\">x</button>\r\n        </div>\r\n        <input\r\n            className=\"edit\"\r\n            value={item.text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            \r\n          />\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Item\r\n"]},"metadata":{},"sourceType":"module"}